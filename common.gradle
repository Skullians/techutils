apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "maven-publish"
apply plugin: "fabric-loom"
apply plugin: "com.replaymod.preprocess"
apply plugin: "me.fallenbreath.yamlang"

int mcVersion = project.mcVersion

preprocess {
    tabIndentation = false
}

repositories {
    maven { url "https://jitpack.io" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Curseforge"
                url = "https://www.cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Gradle Plugin Portal"
        url = "https://plugins.gradle.org/m2/"
    }
    maven {
        name = "Masa Maven"
        url = "https://masa.dy.fi/maven"
    }
    maven {
        name = "TerraformersMC"
        url "https://maven.terraformersmc.com/releases/"
    }
    maven {
        name = "WorldEdit Maven"
        url = "https://maven.enginehub.org/repo/"
    }
    maven {
        name = "Wisp Forest"
        url = "https://maven.wispforest.io/"
    }
    maven {
        name = "KikuGie Maven"
        url = "https://maven.kikugie.dev/third-party"
    }
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude group: "net.fabricmc", module: "fabric-loader"
}

dependencies {
    // loom
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${fabric_kotlin_version}"
    include api(annotationProcessor("com.github.LlamaLad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}"))
    include modImplementation("com.github.Fallen-Breath:conditional-mixin:v${project.conditional_mixin_version}")

    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation "fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version}:${project.malilib_version}"
    modImplementation "fi.dy.masa:litematica:${project.litematica_version}+${project.minecraft_version}"
    modImplementation "fi.dy.masa:itemscroller:${project.itemscroller_version}+${project.minecraft_version}"
    modImplementation "fi.dy.masa:tweakeroo:${project.tweakeroo_version}+${project.minecraft_version}"

    modImplementation "io.wispforest:worldmesher:${project.worldmesher_version}"
    modImplementation "maven.modrinth:isometric-renders:${project.isometric_renders_version}"
    modImplementation "io.wispforest:owo-lib:${project.owo_version}"

    modRuntimeOnly "com.sk89q.worldedit:worldedit-fabric-mc${project.worldedit_version}"
    testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
}

String MIXIN_CONFIG_PATH = "${project.mod_id}.mixins.json"
String LANG_DIR = "assets/${project.mod_id}/lang"
JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 11800) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}

compileKotlin.kotlinOptions.jvmTarget = JAVA_COMPATIBILITY.toString()
loom {
    runConfigs.all {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        runDir "../../run"
        vmArgs "-Dmixin.debug.export=true"
    }
}

remapJar {
    remapperIsolation = true
}

sourceCompatibility = JAVA_COMPATIBILITY
targetCompatibility = JAVA_COMPATIBILITY

version = project.mod_version
group = project.maven_group
archivesBaseName = "${project.archives_base_name}-${project.mod_version}+${project.title_version}"

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
    inputs.property "version", project.mod_version
    inputs.property "id", project.mod_id
    inputs.property "name", project.mod_name
    inputs.property "minecraft_dependency", project.minecraft_dependency
    inputs.property "malilib_dependency", project.malilib_version
    inputs.property "litematica_dependency", project.litematica_version
    inputs.property "itemscroller_dependency", project.litematica_version
    inputs.property "tweakeroo_dependency", project.litematica_version

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "id"                     : project.mod_id,
                "name"                   : project.mod_name,
                "version"                : project.mod_version,
                "minecraft_dependency"   : project.minecraft_dependency,
                "malilib_dependency"     : project.malilib_version,
                "litematica_dependency"  : project.litematica_version,
                "itemscroller_dependency": project.litematica_version,
                "tweakeroo_dependency"   : project.litematica_version
        ]
        expand valueMap
    }

    filesMatching(MIXIN_CONFIG_PATH) {
        expand "compatibility_level": "JAVA_${JAVA_COMPATIBILITY.ordinal() + 1}"
    }
}

// https://github.com/Fallen-Breath/yamlang
yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = LANG_DIR
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    repositories {
        maven {
            name = "kikugieMaven"
            url = "https://maven.kikugie.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = project.maven_group + "." + project.archives_base_name
            artifactId = project.mod_version
            version = project.title_version

            from components.java
        }
    }
}
